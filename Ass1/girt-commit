#!/bin/dash
# 3 April local coding and testing on MacOS

# Checking the current directory is exist or not
if [ -d .girt/ ]
then
    # if exist continue
    :
else
    # not exist raising error
    echo "girt-commit: error: no .girt directory containing girt repository exists"
    exit 1
fi

# get the directory info of current branch
current_branch=$(cat .girt/current_branch)


# check the index is exist or not
if [ -d ".girt/branch/$current_branch/index" ]
then
    # exist continue
    :
else
    # not exist ---> untracked
    echo "nothing added to commit but untracked files present"
    exit 1
fi

# -a could be the second parameter
check_option_a=$1
# the files in the index folder used to loop files
# index_dir = ".girt/branch/$current_branch/index/*"
# check whether there is a -a option
if [ "$check_option_a" = "-a" ]
then
    for file_a in $(ls .girt/branch/$current_branch/index/*)
    do  
        # this part is copied from the girt-commit line 68-70
        filename_a=$(echo $file_a|cut -d'/' -f5,5)
        file_in_dir_a=$(ls $filename_a 2>/dev/null)
        # current list is empty
        if [ "$file_in_dir_a"!="" ]
        then
            # current list is not empty
            cp "$filename_a" "$file_a"
        else
            rm "$file_a"
        fi
    done
fi


# getting the parameters ----> for the subset1 of commit -a
number_input=$#
# symbol for checking changes
changes_counter=0
# changing file numbers
change_number=$(ls -c .girt/repository|wc -l|sed 's/ //g')
# -ne 0 ----> has changes
if [ $change_number -ne 0 ]
then
    # checking the last modify
    # sorting and get the last one
    latest_modified_branch=$(ls .girt/branch/$current_branch/repository|sort |tail -n 1)
    # getting the index changes
    file_index_changes=$(ls .girt/branch/$current_branch/index/ |wc -l)
    # This is to compare with the index changes
    repository_branch_change=$(ls .girt/branch/$current_branch/repository/$latest_modified_branch|wc -l)
    if [ "$file_index_changes" -eq "$repository_branch_change" ]
    then
        # if no changes in index
        if [ $file_index_changes -eq 0 ]
        then
            # if file repository has no changes
            if [ $repository_branch_change -eq 0 ]
            then
                # print error
                echo "nothing to commit"
                exit 1
            else
                :
            fi
        else
            :
        fi
        
        # checking file is exist or not in the dir
        for file in $(ls .girt/branch/$current_branch/index/*)
        do
            # cutting the file name
            filename=$(echo $file|cut -d'/' -f5,5)
            # getting the file in the 
            file_in_dir=$(ls .girt/branch/$current_branch/repository/$latest_modified_branch/$filename 2>/dev/null)
            # file is not exists
            if [ "$file_in_dir" = "" ]
            then
                changes_counter=1
                break
            else
                # file is exists
                # checking the difference
                # How to use difference
                # Source: https://www.geeksforgeeks.org/diff-command-linux-examples/
                difference_repository=$(diff $file .girt/branch/$current_branch/repository/$latest_modified_branch/$filename|wc -w)
                if [ $difference_repository -gt 0 ]
                then
                    changes_counter=1
                    break
                fi
            fi
        done
    else
        changes_counter=1
    fi
# -eq 0 no changes
else
    changes_counter=1
fi

# if changes counter has changed
if [ $changes_counter -ne 0 ]
then
    :
else
    # no changes in counter
    echo "nothing to commit"
    exit 1
fi

# based on the counter create the dir for changes files
mkdir ".girt/repository/$change_number"
# create the same folder in the repository to store
mkdir ".girt/branch/$current_branch/repository/$change_number"

# Getting changes files
changes_files=$(ls .girt/branch/$current_branch/index|wc -l|sed 's/ //g')

# These 3 pathes is for the file moving
# Coping and removing
current_branch_source=".girt/branch/$current_branch/index/*"
repository_destination=".girt/repository/$change_number/"
current_branch_destination=".girt/branch/$current_branch/repository/$change_number/"
if [ $changes_files -le 0 ]
then
    :
else
    # Copy filies
    # using the copy cmd
    # Source: https://www.rapidtables.com/code/linux/cp.html
    cp $current_branch_source  $repository_destination 
    cp $current_branch_source  $current_branch_destination 
fi
echo "Committed as commit $change_number"

# check whether there is a -a in the command
if [ $number_input -eq 4 ]
then
    # if adding the -a option
    # the message is in the 4th location
    message=$3
else
    # if not adding the -a option
    # the message is in the 3rd option
    message=$2
fi

# checking the current log is exist or not
if [ -e ".girt/branch/$current_branch/log" ]
then
    # exist adding the content to the log
    :
else
    # create the file to the current branch
    # How to create file
    # source: https://www.geeksforgeeks.org/touch-command-in-linux-with-examples/
    touch .girt/branch/$current_branch/log
fi
# Adding message to log file
# After the first time commit, createing the log file
echo "$change_number $message" >> .girt/branch/$current_branch/log
