#!/bin/dash

#check .girt exists
if [ -d .girt/ ]
then
    # current .girt exists
    :
else
    # current .girt does not exist ----> print error
    echo "girt-rm: error: no .girt directory containing girt repository exists"
    exit 1
fi

# There are 2 argvs in remove the first is force the second is cached
force_flag=0
cached_flag=0
input_argv=$1
current_branch=$(cat .girt/current_branch)
filelist=$@
force_option="--force"
cached_option="--cached"

# I just wondered that is there a situation which has force and cached at the same time
# Notice: Whether there is a situation that
# check the option of --force
if [ "$input_argv" = "$force_option" ]
then
	force_flag=1
	# How to use shift in the shell
	# this shift is for moving to next one
	# Source: https://unix.stackexchange.com/questions/174566/what-is-the-purpose-of-using-shift-in-shell-scripts
	shift
fi

# This is to check the option of --cached
if [ "$input_argv" = "$cached_option" ]
then
	cached_flag=1
	# See the previous annotation
	shift
fi

#first check all files are in index
for filename in "$filelist"
do	
	# file exist
	if [ -e .girt/branch/$current_branch/index/$filename ]
	then
		# continue
		:
	else
		# file not exists ----> exit and print error
		echo "girt-rm: error: '$filename' is not in the girt repository"
		exit 1
	fi
done

# checking the flag of force and cached
# checking the flag for force
if [ $force_flag -eq 1 ]
then
	# This is from webcms3
	# --force option overrides this, and will carry out the removal even if the user will lose work.
	# if flag = 1 remove file in the index dir
	for file in "$filelist"
	do
		rm ".girt/branch/$current_branch/index/$file"
	done
fi
# checking the flag for cached
if [ $cached_flag -eq 0 ]
then
	# This is from webcms3
	# --cached option, the file is removed only from the index, and not from the current directory.
	# if no catch flag in the previous operation, remove the files in the current directory
	for file in "$filelist"
	do	
		# if exist, then remove the file
		if [ -e  $file ]
		then 
			# remove the file in the filelist
			rm "$file" 
		fi
	done
fi

# these part of codes are similar to girt-commit
change_counter=1
change_number=$(ls -c .girt/repository|wc -l|sed 's/ //g')
latest_modified_branch=$(ls .girt/branch/$current_branch/repository|sort|tail -n 1)
#checking file in the filelist
for file in "$filelist"
do
	# checking whether the file is exist or not
	if [ -e $file ]
	then
		
	else
		:
	fi
done