#!/bin/dash

#check .girt exists
if [ -d .girt/ ]
then
	# current .girt exists
	:
else
	# current .girt does not exist ----> print error
    echo "girt-rm: error: no .girt directory containing girt repository exists"
    exit 1
fi

# There are 2 argvs in remove the first is force the second is cached
force_flag=0
cached_flag=0
# getting the second variable
input_argv=$1
# current_files=$@
current_branch=$(cat .girt/current_branch)

# I just wondered that is there a situation which has force and cached at the same time
# Notice: Whether there is a situation that
# check the option of --force
if [ "$1" = "--force" ]
then
	force_flag=1
	# How to use shift in the shell
	# this shift is for moving to next one
	# Source: https://unix.stackexchange.com/questions/174566/what-is-the-purpose-of-using-shift-in-shell-scripts
	shift
	# This is for subset1_19 2 parameters stay together
	# Adding this part is for both force and cached 
	# Which is --force --cached
	if [ "$1" = "--cached" ]
	then
		cached_flag=1
		shift
	fi
fi

# This is to check the option of --cached
if [ "$1" = "--cached" ]
then
	cached_flag=1
	# How to use shift in the shell
	# this shift is for moving to next one
	# Source: https://unix.stackexchange.com/questions/174566/what-is-the-purpose-of-using-shift-in-shell-scripts
	shift
fi

#first check all files are in index
for filename in "$@"
do
	# file exist
	if [ -e .girt/branch/$current_branch/index/$filename ]
	then
		:
	else
		# file not exists ----> exit and print error
		echo "girt-rm: error: '$filename' is not in the girt repository"
		exit 1
	fi
done


# checking the flag of force and cached
# checking the flag for force
if [ $force_flag -eq 1 ]
then
	# This is from webcms3
	# --force option overrides this, and will carry out the removal even if the user will lose work.
	# if flag = 1 remove file in the index dir
	for file in "$@"
	do
		rm ".girt/branch/$current_branch/index/$file"
	done
	# checking the flag for cached
	if [ $cached_flag -eq 0 ]
	then
		# This is from webcms3
		# --cached option, the file is removed only from the index, and not from the current directory.
		# if no catch flag in the previous operation, remove the files in the current directory
		for file in "$@"
		do
			# if exist, then remove the file
			if [ -e  $file ]
			then 
				# remove the file in the filelist
				rm "$file" 
			fi
		done
	fi
	exit 0
fi

# these part of codes are similar to girt-commit
change_counter=1
#then check for if the contents different between index and current dir or index and repo
change_number=$(ls -c .girt/repository|wc -l|sed 's/ //g')
latest_modified_branch=$(ls .girt/branch/$current_branch/repository|sort -r|head -n1)

# checking if the content in files are different from index directory and current directory or index directory and repository
for file in "$@"
do
	# checking whether the file is exist or not
	if [ -e $file ]
	then
		# Using the difference to check the difference
		# Source: https://www.geeksforgeeks.org/diff-command-linux-examples/
		current_index_difference=$(diff $file .girt/branch/$current_branch/index/$file|wc -w)
		if [ $current_index_difference -gt 0 ]
		then
			if [ $change_number -ne 0 ]
			then
				# latest_modified_file
				latest_modified_file=".girt/branch/$current_branch/repository/$latest_modified_branch/$file"
				if [ -e $latest_modified_file ]
				then
					# using the word counter provided by wc
					# Source: https://explainshell.com/explain?cmd=wc+-w
					repository_difference=$(diff .girt/branch/$current_branch/index/$file .girt/branch/$current_branch/repository/$latest_modified_branch/$file|wc -w)
					if [ $repository_difference -le 0 ]
					then
						:
					else
						change_counter=0
					fi
				else
					change_counter=0
				fi
			else
				if [ $current_index_difference -le 0 ]
				then
					:
				else
					change_counter=0
				fi
			fi
		fi
	fi
	if [ $change_counter -eq 0 ]
	then
		# totally different
		echo "girt-rm: error: '$file' in index is different to both to the working file and the repository"
		exit 1
	fi
done


# Getting the cached flag and remove the file in the directory
# check both cached flag and change counter 
if [ $cached_flag -eq 1 ]
then
	if [ $change_counter -eq 1 ]
	then
		# removed the file in the index directory
		for file in "$@"
		do
			current_branch_index=".girt/branch/$current_branch/index/$file"
			rm "$current_branch_index"
		done
	fi
fi


# no changes of flags, check whether the index files are committed
#and need to mention that if the file already be removed from the current dir,then just directly remove the index one.
if [ $cached_flag -eq 0 ]
then
	if [ $force_flag -eq 0 ]
	then
		for file in "$@"
		do
			# checking the file is exist or not
			if [ -e $file ]
			then
				# compart the current file with the index dir
				current_index_difference=$(diff $file  .girt/branch/$current_branch/index/$file|wc -w)
				if [ $current_index_difference -eq 0 ]
				then
				#if 0 repo,then quit
					if [ $change_number -eq 0 ]
					then
						echo "girt-rm: error: '$file' has staged changes in the index"
						exit 1
					else
						#if the latest repo does not have the file ,then quit
						if [ ! -e .girt/branch/$current_branch/repository/$latest_modified_branch/$file ]
						then
							echo "girt-rm: error: '$file' has staged changes in the index"
							exit 1
						else
						#does not the same file
							repository_difference=$(diff .girt/branch/$current_branch/index/$file .girt/branch/$current_branch/repository/$latest_modified_branch/$file|wc -w)
							if [ $repository_difference -gt 0 ]
							then
								echo "girt-rm: error: '$file' has staged changes in the index"
								exit 1
							fi
						fi
					fi
				else
					# current_dir_difference eq 0
					if [ $change_number -gt 0 ]
					then
						if [ -e .girt/branch/$current_branch/repository/$latest_modified_branch/$file ]
						then
							repository_difference=$(diff .girt/branch/$current_branch/index/$file .girt/branch/$current_branch/repository/$latest_modified_branch/$file|wc -w)
							if [ $repository_difference -eq 0 ]
							then
								#if the latest repository has no file ,then quit the program
								echo "girt-rm: error: '$file' in the repository is different to the working file"
								exit 1
							fi
						fi
					fi
				fi
			fi
		done
		for file in "$@"
		do
			current_branch_index=".girt/branch/$current_branch/index/$file"
			rm "$current_branch_index"
			# remove
			if [ -e $file ]
			then
				rm "$file"
			fi
		done
	fi
fi
